% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jumpDiffusionODEs.R
\name{jumpDiffusionODEs}
\alias{jumpDiffusionODEs}
\alias{jumpDiffusionODEsP}
\alias{odeExtSolveWrap}
\title{ODE solver for jump diffusion models.}
\usage{
jumpDiffusionODEs(
  u,
  params,
  mkt,
  jumpTransform = getPointerToJumpTransform("expNormJumpTransform")$TF,
  rtol = 1e-12,
  atol = 1e-30,
  mf = 22,
  N.factors = 3
)

jumpDiffusionODEsP(
  u,
  params.P,
  params.Q,
  mkt,
  jumpTransform = getPointerToJumpTransform("expNormJumpTransform")$TF,
  rtol = 1e-13,
  atol = 1e-30,
  mf = 22,
  N.factors = 3
)

odeExtSolveWrap(
  u,
  params.Q,
  params.P = NULL,
  mkt,
  rtol = 1e-12,
  atol = 1e-30,
  mf = 12,
  N.factors = 3,
  jumpTransform = getPointerToJumpTransform("expNormJumpTransform"),
  ...
)
}
\arguments{
\item{u}{\code{Ux(N.factors+1)} matrix of complex numbers.}

\item{params}{A list, containing the structures defining the stochastic volatitilites and jumps. See Details.}

\item{mkt}{data.frame describing the market structure (times to maturity, interest rate, dividend yield, current stock price). See Details.}

\item{jumpTransform}{string indicating which jump transform to contain in the specification. Available values: \code{'expNormJumpTransform'} for the co-jump specification from DPS (2000) ``concrete examples'' section, \code{'kouExpJumpTransform'} for a similar co-jump specification with double exponential jumps in the log-asset price.}

\item{rtol}{relative tolerance for the ODE solver functions, \code{\link[deSolve]{vode}} and \code{\link[deSolve]{zvode}}.}

\item{atol}{absolute tolerance for the ODE solver functions, \code{\link[deSolve]{vode}} and \code{\link[deSolve]{zvode}}.}

\item{mf}{Integration method to use in the ODE solver functions, \code{\link[deSolve]{vode}} and \code{\link[deSolve]{zvode}}.}

\item{N.factors}{The number of volatility factors, of which the first one can co-jump with the stock.}

\item{params.P}{P (statistical measure) parameters, see Details.}

\item{params.Q}{Q (pricing measure) parameters, see Details.}
}
\value{
From \code{jumpDiffusionODEs} and \code{jumpDiffusionODEsP}: An array of size \code{UxTx(N.factors + 1)} where \code{U = nrow(u)}, \code{T = length(mkt$t)} (number of maturities), code{N.factors+1} is the number of coefficients in the exponentially affine characteristic function. \cr
From \code{odeEstSolveWrap}: an array of UxTx(4x(N.factors+1)): affine coefficients and their derivatives with respect to \code{u[,1]}. This allows to for highly accurate evaluation of the derivatives of the characteristic function of the log-asset price.
}
\description{
Return the solution of the ODE describing the conditional Laplace transform of the affine states (log stock + volatility factors). Calculations performed under the pricing measure Q, i.e. with value of Laplace transform constrained to 1 for \code{u = c(1,rep(0,N.factors))}, where \code{N.factors} is the number of stochastic volatility factors, or under the statistical measure P, with Q parameters required to set risk premia and dynamics.
}
\details{
\code{jumpDiffusionODEs} solves the Riccati equations associated with a jump-diffusion model under the restrictions of the pricing measure: the stock price process is a martingale. \cr
\code{jumpDiffusionODEsP} uses \code{params.Q} and \code{params.P} to construct a model with well-defined risk premia and solves the Riccati equation under the statistical measure; this construction is required because the parameters of the stock equation under the statistical measure depend, in some specifications, on the parameters of the stock and volatility equations under the pricing measure.
\cr \cr
\code{params}, \code{params.P} and \code{params.Q} are \code{list}s with \code{N.factors+1} fields. \cr \cr
The fields must be named \code{'1'} through \code{'N.factors'} and \code{'jmp'}. The numbered fields correspond to volatility factor specifications with parameters: \code{kpp} (mean reversion speed), \code{lmb} (volatility-of-volatility), \code{rho} (correlation with log-asset price, leverage effect), \code{eta} (long-run mean), and \code{phi}: volatility scaling in the log-asset price equation. \code{kpp}, \code{lmb} greater than 0, \code{phi} greater than or equal to 0. If \code{phi = 0}, the volatility factor does not drive the log-asset price, but can potentially drive the jump intensity; either \code{eta} or \code{phi} should be normalised to \code{1}. The parameter \code{params.P$[["1"]]$erp} sets how the risk premium is driven by the total level of volatility. \cr \cr
The list \code{$jmp} has fields: \code{lvec} (double): jump intensity, constant part, \code{lprop} jump intensity loadings on volatility factors, \code{length(lprop) = N.factors}, \code{muSc} (positive, mean vol jump for 'expNormJumpTransform' or one over mean vol jump for 'kouExpJumpTransform'), \code{rhoc} (jump leverage), \code{muYc} (jump distribution location parameter), \code{sigmaYc} (jump distribution scale parameter).
\cr \cr
\code{mkt} data.frame describing maturities and corresponding interest rates, dividend yields. Fields: \code{p}: initial stock price, normalized to 1 without loss of generality, \code{q} dividend yield per annum, \code{r} interest rate, per annum, \code{t} maturity for which the ODE solutions are to be calculated.
}
